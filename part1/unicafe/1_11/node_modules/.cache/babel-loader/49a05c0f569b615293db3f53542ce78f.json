{"ast":null,"code":"var _jsxFileName = \"C:\\\\Git\\\\full_stack_open\\\\FullStackOpen\\\\part1\\\\unicafe\\\\1_11\\\\src\\\\index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst Statistic = ({\n  text,\n  value\n}) => {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, text, \" : \", value, \" \");\n};\n\nconst Statistics = props => {\n  let [good, neutral, bad, all, av, positive] = props.stats;\n  console.log('All: ', all);\n\n  if (all > 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"table\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      colSpan: \"2\",\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 5\n      }\n    }, \" Statistic \")), /*#__PURE__*/React.createElement(Statistic, {\n      text: \"good\",\n      value: good,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Statistic, {\n      text: \"neutral\",\n      value: neutral,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(Statistic, {\n      text: \"bad\",\n      value: bad,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 16\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Statistic, {\n      text: \"all\",\n      value: all,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Statistic, {\n      text: \"av\",\n      value: av,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Statistic, {\n      text: \"positive\",\n      value: positive,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 7\n      }\n    })));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 4\n    }\n  }, \"No statistic to show\"));\n};\n\nconst Button = ({\n  text,\n  handleClick\n}) => {\n  console.log('Text', text);\n  console.log('HandleClick', handleClick);\n  return /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, text);\n};\n\nconst App = () => {\n  // save clicks of each button to own state\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const [stats, setStat] = useState({\n    'all': 0,\n    'av': 0,\n    'positive': 0\n  });\n\n  const calcStat = (good, neutral, bad) => {\n    let all = good + neutral + bad;\n    let av = (good - bad) / (good + bad + neutral);\n    let positive = good / (good + bad + neutral);\n    console.log('good', handlers['good']);\n    return {\n      'all': all,\n      'av': av,\n      'positive': positive\n    };\n  };\n\n  const handlers = {\n    'good': () => {\n      setGood(good + 1);\n      setStat(calcStat(good + 1, neutral, bad));\n    },\n    'neutral': () => {\n      setNeutral(neutral + 1);\n      setStat(calcStat(good, neutral + 1, bad));\n    },\n    'bad': () => {\n      setBad(bad + 1);\n      setStat(calcStat(good, neutral, bad + 1));\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, \"Give Feedback\"), /*#__PURE__*/React.createElement(Button, {\n    text: \"Good\",\n    handleClick: handlers['good'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 2\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    text: \"Neutral\",\n    handleClick: handlers['neutral'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 2\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    text: \"Bad\",\n    handleClick: handlers['bad'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 2\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 14\n    }\n  }), /*#__PURE__*/React.createElement(Statistics, {\n    stats: [good, neutral, bad, stats.all, stats.av, stats.positive],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }));\n};\n\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 17\n  }\n}), document.getElementById('root'));","map":{"version":3,"sources":["C:/Git/full_stack_open/FullStackOpen/part1/unicafe/1_11/src/index.js"],"names":["React","useState","ReactDOM","Statistic","text","value","Statistics","props","good","neutral","bad","all","av","positive","stats","console","log","Button","handleClick","App","setGood","setNeutral","setBad","setStat","calcStat","handlers","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst Statistic = ({text,value}) => { return  (<>{text} : {value} </>) }\n\nconst Statistics = ( props ) => {\t\n\t\t\n\t\tlet [good,neutral,bad,all,av,positive] = props.stats\n\t\tconsole.log('All: ',all)\n\t\tif (all>0) {  \n\t\t\treturn (\n\t\t\t<div>\n\t\t\t<table>\n\t\t\t   <tr>\n\t\t\t\t<th colSpan=\"2\" align=\"center\"> Statistic </th>\n\t\t\t   </tr>\n\t\t  \t   <Statistic text=\"good\" value ={good} />\n     \t\t   \t   <Statistic text=\"neutral\" value ={neutral} />\n     \t\t    \t   <Statistic text=\"bad\" value ={bad} />\n\t\t\t   <br />\n\t\t\t   <Statistic text=\"all\" value ={all} />\n\t\t\t   <Statistic text=\"av\" value ={av} />\n\t\t\t   <Statistic text=\"positive\" value ={positive} />\n\t\t\t</table>\n\t\t\t</div> \n\t\t\t)\n\t\t}\n\t\treturn (\n\t\t<div>\n\t\t\t<h3>No statistic to show</h3>\n\t\t</div>\n\t\t)\n}\n\nconst Button = ({text,handleClick}) => {\n\tconsole.log('Text', text)\n\tconsole.log('HandleClick', handleClick)\n\treturn <button onClick = { handleClick }>{text}</button>\n}\n\nconst App = () => {\n  // save clicks of each button to own state\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n  const [stats, setStat] = useState({'all':0, 'av':0, 'positive':0})\n\n  \n\n  \n\n  const calcStat = (good,neutral,bad) => {\n\t\t\t    let\tall = good+neutral+bad\n\t\t\t    let\tav =  (good-bad)/(good+bad+neutral)\n\t\t\t    let positive = good /(good+bad+neutral)\n\t\t\t    console.log('good',handlers['good'])\n\t\t\t\treturn { 'all':all, 'av':av, 'positive':positive}\n  \t\t}\n\n  const handlers = { 'good' : () => { setGood(good+1);  setStat(calcStat(good+1,neutral,bad)) }, \n\t\t     'neutral' : () => { setNeutral(neutral+1);  setStat(calcStat(good,neutral+1,bad)) }, \n\t\t     'bad' : () => { setBad(bad+1);  setStat(calcStat(good,neutral,bad+1)) } \n\t\t };\n\n  return (\n    <div>\n      <h2>Give Feedback</h2>\n     {/*  <button onClick={()=> { setGood(good + 1); setStat(calcStat(good+1,neutral,bad));  } }>Good</button>  */}\n     {/*\t<button onClick= { handlers['good']  }>Good</button>\t\t\t\t\t\t*/}\n\t<Button text='Good' handleClick={handlers['good']} />\n\t<Button text='Neutral' handleClick={handlers['neutral']} />\n\t<Button text='Bad' handleClick={handlers['bad']} />\n\t\n\n        <br/><br/>\n        <Statistics stats = {[good,neutral,bad,stats.all,stats.av,stats.positive]} />\n    </div>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))"]},"metadata":{},"sourceType":"module"}